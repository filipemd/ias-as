/* Copyright (C) 2025  filipemd

   This file is part of IAS Assembler.

   IAS Assembler is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   IAS Assembler is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with IAS Assembler.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-value"

#include "lexer.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

static char* dup_match(const char* start, const char* end) {
    size_t len = end - start;
    char* s = malloc(len + 1);
    if (!s) { perror("malloc"); exit(1); }
    memcpy(s, start, len);
    s[len] = '\0';
    return s;
}

struct lexer_token determine_token(const char* word, unsigned int line) {
    const char *YYCURSOR = word;
    const char *YYLIMIT = word + strlen(word);
    const char *YYMARKER;
    const char *YYTOKEN_START = word;

    /*!re2c
        re2c:define:YYCTYPE = char;
        re2c:define:YYCURSOR = YYCURSOR;
        re2c:define:YYMARKER = YYMARKER;
        re2c:tags = 1;
        re2c:define:YYFILL = ;
        re2c:indent:top = 1;

        [\x00] { goto unknown; }

        "LOAD"           { return (struct lexer_token){line, INSTRUCTION_LOAD, NULL}; }
        "STOR"           { return (struct lexer_token){line, INSTRUCTION_STOR, NULL}; }
        "JUMP+"          { return (struct lexer_token){line, INSTRUCTION_JUMP_PLUS, NULL}; }
        "JUMP"           { return (struct lexer_token){line, INSTRUCTION_JUMP, NULL}; }
        "ADD"            { return (struct lexer_token){line, INSTRUCTION_ADD, NULL}; }
        "SUB"            { return (struct lexer_token){line, INSTRUCTION_SUB, NULL}; }
        "MUL"            { return (struct lexer_token){line, INSTRUCTION_MUL, NULL}; }
        "DIV"            { return (struct lexer_token){line, INSTRUCTION_DIV, NULL}; }
        "HALT"            { return (struct lexer_token){line, INSTRUCTION_HALT, NULL}; }
        "LSH"            { return (struct lexer_token){line, INSTRUCTION_LSH, NULL}; }
        "RSH"            { return (struct lexer_token){line, INSTRUCTION_RSH, NULL}; }

        "MQ"             { return (struct lexer_token){line, REGISTER_MQ, NULL}; }

        "0:19"           { return (struct lexer_token){line, PARAM_0_TO_19, NULL}; }
        "20:39"          { return (struct lexer_token){line, PARAM_20_TO_39, NULL}; }
        "8:19"           { return (struct lexer_token){line, PARAM_8_TO_19, NULL}; }
        "28:39"          { return (struct lexer_token){line, PARAM_28_TO_39, NULL}; }

        ".org"           { return (struct lexer_token){line, KEYWORD_ORG, NULL}; }
        ".word"          { return (struct lexer_token){line, KEYWORD_WORD, NULL}; }
        ".wfill"         { return (struct lexer_token){line, KEYWORD_WFILL, NULL}; }
        ".set"           { return (struct lexer_token){line, KEYWORD_SET, NULL}; }

        "0x"[0-9a-fA-F]+ { return (struct lexer_token){line, NUMBER_HEX, dup_match(YYTOKEN_START, YYCURSOR)}; }
        "0X"[0-9a-fA-F]+ { return (struct lexer_token){line, NUMBER_HEX, dup_match(YYTOKEN_START, YYCURSOR)}; }
        [0-9]+           { return (struct lexer_token){line, NUMBER_DECIMAL, dup_match(YYTOKEN_START, YYCURSOR)}; }

        [a-zA-Z_][a-zA-Z0-9_]*":" {
            return (struct lexer_token){line, LABEL_DECLARATION, dup_match(YYTOKEN_START, YYCURSOR - 1)};
        }

        [a-zA-Z_][a-zA-Z0-9_]* {
            return (struct lexer_token){line, LABEL_USAGE, dup_match(YYTOKEN_START, YYCURSOR)};
        }

        "|"[^|]*"|"      {
            char* s = dup_match(YYTOKEN_START + 1, YYCURSOR - 1);
            return (struct lexer_token){line, TOKEN_ABSOLUTE, s};
        }

        "-"[^\x00]+      {
            char* s = dup_match(YYTOKEN_START + 1, YYCURSOR);
            return (struct lexer_token){line, TOKEN_NEGATIVE, s};
        }

        * {
            goto unknown;
        }
    */

unknown:
    fprintf(stderr, "ERROR in line %d: no token \"%s\".\n", line, word);
    return (struct lexer_token){line, TOKEN_NONE, NULL};
}

#pragma GCC diagnostic pop